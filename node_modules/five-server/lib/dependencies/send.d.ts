declare const Stream: any;
interface SendStreamOptions {
    acceptRanges?: any;
    cacheControl?: any;
    dotfiles?: any;
    end?: any;
    etag?: any;
    extensions?: any;
    from?: any;
    hidden?: any;
    immutable?: any;
    index?: any;
    lastModified?: any;
    maxAge?: number;
    maxage?: number;
    root?: any;
    start?: any;
}
declare const send: (req: any, path: any, options: SendStreamOptions) => SendStream;
export default send;
declare class SendStream extends Stream {
    req: any;
    path: any;
    options: SendStreamOptions;
    private _maxage;
    constructor(req: any, path: any, options: SendStreamOptions);
    root(path: any): this;
    error(status: any, err?: any): any;
    hasTrailingSlash(): boolean;
    isConditionalGET(): any;
    isPreconditionFailure(): boolean;
    removeContentHeaderFields(): void;
    notModified(): void;
    headersAlreadySent(): void;
    isCachable(): boolean;
    onStatError(error: any): void;
    isFresh(): any;
    isRangeFresh(): boolean;
    redirect(path: any): void;
    pipe(res: any): any;
    send(path: any, stat: any): any;
    sendFile(path: any): void;
    sendIndex(path: any): void;
    stream(path: any, options: any): void;
    type(path: any): void;
    setHeader(path: any, stat: any): void;
}
