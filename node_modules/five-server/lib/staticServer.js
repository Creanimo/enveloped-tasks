"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.entryPoint = exports.staticServer = void 0;
const colors_1 = require("./colors");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const send_1 = __importDefault(require("./dependencies/send"));
const es = require('event-stream'); // looks ok for now (https://david-dm.org/dominictarr/event-stream)
// Based on connect.static(), but streamlined and with added code injector
const staticServer = (root, opts) => {
    const { logLevel, injectedCode } = opts;
    let isFile = false;
    let filePath = '';
    try {
        // For supporting mounting files instead of just directories
        isFile = fs_1.default.statSync(root).isFile();
    }
    catch (e) {
        if (e.code !== 'ENOENT')
            throw e;
    }
    return function (req, res, next) {
        if (req.method !== 'GET' && req.method !== 'HEAD')
            return next();
        const baseURL = `http://${req.headers.host}/`;
        const reqUrl = new URL(req.url, baseURL);
        const reqpath = isFile ? '' : reqUrl.pathname;
        const hasNoOrigin = !req.headers.origin;
        const injectCandidates = [new RegExp('</head>', 'i'), new RegExp('</body>', 'i'), new RegExp('</svg>')];
        let injectTag = null;
        function directory() {
            const baseURL = `http://${req.headers.host}/`;
            const reqUrl = new URL(req.url, baseURL);
            const pathname = reqUrl.pathname;
            res.statusCode = 301;
            res.setHeader('Location', `${pathname}/`);
            res.end(`Redirecting to ${escape(pathname)}/`);
        }
        function file(filepath /*, stat*/) {
            filePath = filepath;
            const x = path_1.default.extname(filepath).toLocaleLowerCase();
            const possibleExtensions = ['', '.html', '.htm', '.xhtml', '.php', '.svg'];
            let match;
            if (hasNoOrigin && possibleExtensions.indexOf(x) > -1) {
                // TODO: Sync file read here is not nice, but we need to determine if the html should be injected or not
                const contents = fs_1.default.readFileSync(filepath, 'utf8');
                for (let i = 0; i < injectCandidates.length; ++i) {
                    match = injectCandidates[i].exec(contents);
                    if (match) {
                        injectTag = match[0];
                        break;
                    }
                }
                if (injectTag === null && logLevel >= 3) {
                    console.warn(colors_1.colors('Failed to inject refresh script!', 'yellow'), "Couldn't find any of the tags ", injectCandidates, 'from', filepath);
                }
            }
        }
        function error(err) {
            if (err.status === 404)
                return next();
            next(err);
        }
        function inject(stream) {
            if (injectTag) {
                const injection = `
    <!-- Code injected by Five-server -->
    <script async data-id="five-server" data-file="${filePath}" type="application/javascript" src="/fiveserver.js"></script>

  ${injectTag}`;
                // We need to modify the length given to browser
                const len = injection.length + res.getHeader('Content-Length') - injectTag.length;
                res.setHeader('Content-Length', len);
                const originalPipe = stream.pipe;
                stream.pipe = function (resp) {
                    originalPipe.call(stream, es.replace(new RegExp(injectTag, 'i'), injection)).pipe(resp);
                };
            }
        }
        send_1.default(req, reqpath, { root: root })
            .on('error', error)
            .on('directory', directory)
            .on('file', file)
            .on('stream', inject)
            .pipe(res);
    };
};
exports.staticServer = staticServer;
/**
 * Rewrite request URL and pass it back to the static handler.
 * @param staticHandler {function} Next handler
 * @param file {string} Path to the entry point file
 */
const entryPoint = (staticHandler, file) => {
    if (!file)
        return function (req, res, next) {
            next();
        };
    return function (req, res, next) {
        req.url = `/${file}`;
        staticHandler(req, res, next);
    };
};
exports.entryPoint = entryPoint;
