/// <reference types="node" />
import chokidar from 'chokidar';
import http from 'http';
import WebSocket from 'ws';
import { Colors } from './colors';
import { LiveServerParams } from './types';
export { LiveServerParams };
interface ExtendedWebSocket extends WebSocket {
    sendWithDelay: (data: any, cb?: ((err?: Error | undefined) => void) | undefined) => void;
    file: string;
    ip: string;
    color: Colors;
}
export default class LiveServer {
    httpServer: http.Server;
    watcher: chokidar.FSWatcher;
    logLevel: number;
    injectBody: boolean;
    private colors;
    private colorIndex;
    private newColor;
    clients: ExtendedWebSocket[];
    sockets: Set<any>;
    private _openURL;
    private _protocol;
    get openURL(): string;
    get protocol(): "http" | "https";
    get isRunning(): boolean;
    /** Start five-server */
    start(options?: LiveServerParams): Promise<void>;
    private listen;
    /**
     * Navigate the browser to another page.
     * @param url Navigates to the given URL.
     */
    navigate(url: string): void;
    /** Launch a new browser window. */
    launchBrowser(path: string | boolean | string[] | null | undefined, browser?: string | string[] | null): Promise<void>;
    /** Reloads all browser windows */
    reloadBrowserWindow(): void;
    /** Manually refresh css */
    refreshCSS(): void;
    /** Inject new HTML into the body (VSCode only) */
    updateBody(file: string, body: string, position?: {
        line: number;
        character: number;
    }): void;
    highlight(file: string, position: {
        line: number;
        character: number;
    }): void;
    /** Close five-server (same as shutdown()) */
    get close(): () => Promise<void>;
    /** Shutdown five-server */
    shutdown(): Promise<void>;
}
