"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.charsets = exports.getConfigFile = exports.removeTrailingSlash = exports.removeLeadingSlash = exports.escape = exports.createError = exports.error = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const error = (msg) => {
    if (msg)
        console.log(msg);
    else
        console.log('ERROR: Unknown :/');
    process.exit(1);
};
exports.error = error;
// just a fallback for removing http-errors dependency
const createError = (code, msg = 'unknown', _nothing) => {
    console.log(`ERROR: ${code} ${msg}`);
    return { message: msg, code, status: code, statusCode: code, name: code };
};
exports.createError = createError;
const escape = html => {
    return String(html)
        .replace(/&(?!\w+;)/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;');
};
exports.escape = escape;
const removeLeadingSlash = (str) => {
    return str.replace(/^\/+/g, '');
};
exports.removeLeadingSlash = removeLeadingSlash;
const removeTrailingSlash = (str) => {
    return str.replace(/\/+$/g, '');
};
exports.removeTrailingSlash = removeTrailingSlash;
/**
 * Get and parse the configFile.
 * @param configFile Absolute path of configFile, or true, or false.
 * @param workspace Absolute path to the current workspace.
 * @returns LiveServerParams
 */
const getConfigFile = (configFile = true, workspace) => {
    let options = {
        host: process.env.IP,
        port: process.env.PORT ? parseInt(process.env.PORT) : 8080,
        open: true,
        mount: [],
        proxy: [],
        middleware: [],
        logLevel: 2
    };
    if (configFile === false)
        return options;
    const dirs = [];
    const files = [
        '.fiveserverrc',
        '.fiveserverrc.json',
        '.fiveserverrc.js',
        '.fiveserverrc.cjs',
        'fiveserver.config.js',
        'fiveserver.config.cjs',
        '.live-server.json'
    ];
    if (typeof configFile === 'string') {
        // TODO: Add support for this
        files.unshift(configFile);
    }
    if (workspace)
        dirs.push(workspace);
    dirs.push(path_1.default.resolve());
    const homeDir = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];
    if (homeDir)
        dirs.push(homeDir);
    dirs.push(process.cwd());
    loop: for (const d of dirs) {
        for (const f of files) {
            const configPath = path_1.default.join(d, f);
            if (fs_1.default.existsSync(configPath)) {
                if (/\.c?js/.test(path_1.default.extname(configPath))) {
                    delete require.cache[configPath];
                    const config = require(configPath);
                    options = Object.assign(Object.assign({}, options), config);
                }
                else {
                    const config = fs_1.default.readFileSync(configPath, 'utf8');
                    options = Object.assign(Object.assign({}, options), JSON.parse(config));
                }
                if (options.ignorePattern)
                    options.ignorePattern = new RegExp(options.ignorePattern);
                break loop;
            }
        }
    }
    // some small adjustments
    if (options.root)
        options.root = options.root.replace(/^\/+/, '');
    if (options.open === 'true')
        options.open = true;
    if (options.open === 'false')
        options.open = false;
    if (options.https === 'true')
        options.https = true;
    return options;
};
exports.getConfigFile = getConfigFile;
/**
 * @author       Benjamin Thomas (https://github.com/bentomas)
 * @author       Robert Kieffer (https://github.com/broofa)
 * @copyright    Copyright (c) 2010 Benjamin Thomas, Robert Kieffer
 * @license      {@link https://github.com/broofa/mime/blob/v1.x/LICENSE|MIT}
 * @description  charset() methods have been removed from mime v2, this is why I added it here
 */
/** Lookup a charset based on mime type. */
exports.charsets = {
    lookup: (mimeType, fallback) => {
        // Assume text types are utf8
        return /^text\/|^application\/(javascript|json)/.test(mimeType) ? 'UTF-8' : fallback;
    }
};
